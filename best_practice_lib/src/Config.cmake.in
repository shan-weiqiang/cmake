@PACKAGE_INIT@

######### This file should be manually managed by developer #########

# This file will be preprocessed by configure_package_config_file into
# <pkg>Config.cmake file, which will be processed by find_pakcage command.
# The content should be manually managed by developer to handle components
# inside this package and their dependencies.

# ${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS represent the value in COMPONENTS
# parameter in find_pakcage command.
if(${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS)
    set(comps ${${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS})
    # Handle intra-pkg dependencies. Note the dependency chain
    # We have to carefully handle this to ensure that correct
    # components should be imported
    if(Computer IN_LIST comps AND NOT Caculator IN_LIST comps)
        list(PREPEND comps Caculator)
    endif()
    # Since we know that Caculator depends on Math, handle it
    if(Caculator IN_LIST comps AND NOT Math IN_LIST comps)
        # Use PREPEND instead of APPEND, since we will include components in the
        # order of this list, and targets will be imported in this step. If a
        # component depend on another, the config file will check the existence 
        # of the dependees  and if they are still not imported as IMPORTED_TARGETS
        # at that time, there will be error
        list(PREPEND comps Math)
    endif()
    # Handle intra-pkg dependences for the Json component
    if(Math IN_LIST comps AND NOT Json IN_LIST comps)
        list(PREPEND comps Json)
    endif()
else()
    # If no COMPONENTS parameter in find_pacakge, defautl to find all components
    # Note the components name are decided by FILE in install(EXPORT...) command
    set(comps Caculator Math Json Computer)
endif()

# Handle extern-pkg dependencies
include(CMakeFindDependencyMacro)
set(${CMAKE_FIND_PACKAGE_NAME}_comps ${comps})
if(Math IN_LIST comps)
    # Warn: find_package/include(..) do not introduce new scope, if in any of following command
    # , variables in current file, such as `comp` is changed to a new value, it will change
    # value in current file. This can be very confusing. Better to use more specific variable
    # names to avoid this situation
    find_dependency(foonathan_memory)
endif()


foreach(comp IN LISTS ${CMAKE_FIND_PACKAGE_NAME}_comps)
    # ${CMAKE_FIND_PACKAGE_NAME}_FIND_REQUIRED_<comp> will be true if the component is specified
    # as REQUIRED in find_package
    if(${CMAKE_FIND_PACKAGE_NAME}_FIND_REQUIRED_${comp} AND
        NOT EXISTS ${CMAKE_CURRENT_LIST_DIR}/${comp}/${comp}Config.cmake)
        # Both the find result and message should be passed to find_package for handling, instead of
        # handle them inside this file
        set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "bp missing required dependency: ${comp}")
        set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
        return()
    endif()
endforeach()

foreach(comp IN LISTS ${CMAKE_FIND_PACKAGE_NAME}_comps)
    # At this point, all REQUIRED components are known to exist. We can safely include
    # their config files. For other components we have not checked their config file
    # existence, so the OPTIONAL parameter bypass this situation if their config file does not exist.

    # Note that the path here should be consistent with:
    # 1. INSTALL_DESTINATION parameter in configure_package_config_file command
    # 2. DESTINATION parameter in install command when install config file
    include(${CMAKE_CURRENT_LIST_DIR}/${comp}/${comp}Config.cmake OPTIONAL)
endforeach()
